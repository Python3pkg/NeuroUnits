LIBRARY my_neuro {
    from std.math import pow
    RateConstant5(V:(V),a1:(s-1) ,a2:(V-1 s-1), a3:(),a4:(V),a5:(V) ) = (a1 + a2*V)/(a3+std.math.exp( (V+a4)/a5) )
}

EQNSET chlstd_hh_na {

    from my_neuro import RateConstant5
    from std.math import exp
    i = g * (v-erev) * m**3*h

    minf = m_alpha_rate / (m_alpha_rate + m_beta_rate)
    mtau = 1.0 / (m_alpha_rate + m_beta_rate)
    m' = (minf-m) / mtau

    hinf = h_alpha_rate / (h_alpha_rate + h_beta_rate)
    htau = 1.0 / (h_alpha_rate + h_beta_rate)
    h' = (hinf-h) / htau
    
    m_alpha_rate = RateConstant5( V=v,a1=m_a1,a2=m_a2,a3=m_a3,a4=m_a4,a5=m_a5)
    m_beta_rate =  RateConstant5( V=v,a1=m_b1,a2=m_b2,a3=m_b3,a4=m_b4,a5=m_b5)
    h_alpha_rate = RateConstant5( V=v,a1=h_a1,a2=h_a2,a3=h_a3,a4=h_a4,a5=h_a5)
    h_beta_rate =  RateConstant5( V=v,a1=h_b1,a2=h_b2,a3=h_b3,a4=h_b4,a5=h_b5)

    <=> PARAMETER g, erev
    <=> PARAMETER m_a1, m_a2, m_a3, m_a4, m_a5
    <=> PARAMETER m_b1, m_b2, m_b3, m_b4, m_b5
    <=> PARAMETER h_a1, h_a2, h_a3, h_a4, h_a5
    <=> PARAMETER h_b1, h_b2, h_b3, h_b4, h_b5
    <=> OUTPUT    i:(mA/cm2)      METADATA {"mf":{"role":"TRANSMEMBRANECURRENT"} }
    <=> INPUT     v: mV           METADATA {"mf":{"role":"MEMBRANEVOLTAGE"} }
}
